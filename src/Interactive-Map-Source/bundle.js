(function (React$1, ReactDOM, d3, topojson) {
  'use strict';

  var React$1__default = 'default' in React$1 ? React$1['default'] : React$1;
  ReactDOM = ReactDOM && Object.prototype.hasOwnProperty.call(ReactDOM, 'default') ? ReactDOM['default'] : ReactDOM;

  const jsonUrl = 'https://unpkg.com/us-atlas@3.0.0/states-10m.json';

  const useUSAtlas = () => {
    const [data, setData] = React$1.useState(null);
    React$1.useEffect(() => {
      d3.json(jsonUrl).then(topology => {
        const { states } = topology.objects;
      	setData({
          states: topojson.feature(topology, states),
          interiors: topojson.mesh(topology, states, (a, b) => a != b)
        });
      });
    }, []);
      

    return data;
  };

  const csvUrl = 'https://gist.githubusercontent.com/itsyaboichase/fe92d3ac76b98126fb3fc766e52f6414/raw/b7dcc81f8b690c24cd32e54bf31f718c4f0bd3cb/whole_usa_ozone_exsample_cleaned.csv';

  const useData = () => {
    const [data, setData] = React$1.useState(null);
    
    React$1.useEffect(() => {
      d3.csv(csvUrl).then(setData);
    }, []);
      
    return data;
  };

  const projection = d3.geoAlbersUsa();
  const path = d3.geoPath(projection);

  const Marks = ({ 
    USAtlas: { states, interiors }, 
    data,
    sizeScale,
    sizeValue
  }) => (
    React.createElement( 'g', { className: "marks" },
      states.features.map(feature => (
        React.createElement( 'path', { className: "states", d: path(feature) })
      )),
      React.createElement( 'path', { className: "interiors", d: path(interiors) }),
      data.map(d => {
        const [x, y] = projection([d.longitude, d.latitude]);
        return React.createElement( 'circle', { 
                 cx: x, cy: y, r: sizeScale(sizeValue(d)) },
               	React.createElement( 'title', null, " place holder for 10 green score " )
          	 	 )
      })
    )
  );

  const BubbleMap = ({ data, USAtlas }) => {
    const sizeValue = d => d.AQI;
  	const maxRadius = 5;
          
    const sizeScale = d3.scaleSqrt()
  		.domain([0, d3.max(data, sizeValue)])
    	.range([0, maxRadius]);
    
    return(
  		React$1__default.createElement( Marks, {
        USAtlas: USAtlas, data: data, sizeScale: sizeScale, sizeValue: sizeValue })
    );
  };

  const width = 960;
  const height = 500;

  const App = () => {
    const USAtlas = useUSAtlas();
    const data = useData();

    if (!USAtlas || !data) { 
      return React$1__default.createElement( 'pre', null, "Loading..." );
    }

  return (
    React$1__default.createElement( 'svg', { width: width, height: height },
      React$1__default.createElement( BubbleMap, { data: data, USAtlas: USAtlas })
    )
  	);
  };

  const rootElement = document.getElementById('root');
  ReactDOM.render(React$1__default.createElement( App, null ), rootElement);

}(React, ReactDOM, d3, topojson));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbInVzZVVTQXRsYXMuanMiLCJ1c2VEYXRhLmpzIiwiTWFya3MuanMiLCJCdWJibGVNYXAuanMiLCJpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUsIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGpzb24gfSBmcm9tICdkMyc7XG5pbXBvcnQgeyBmZWF0dXJlLCBtZXNoIH0gZnJvbSAndG9wb2pzb24nO1xuXG5jb25zdCBqc29uVXJsID0gJ2h0dHBzOi8vdW5wa2cuY29tL3VzLWF0bGFzQDMuMC4wL3N0YXRlcy0xMG0uanNvbic7XG5cbmV4cG9ydCBjb25zdCB1c2VVU0F0bGFzID0gKCkgPT4ge1xuICBjb25zdCBbZGF0YSwgc2V0RGF0YV0gPSB1c2VTdGF0ZShudWxsKTtcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBqc29uKGpzb25VcmwpLnRoZW4odG9wb2xvZ3kgPT4ge1xuICAgICAgY29uc3QgeyBzdGF0ZXMgfSA9IHRvcG9sb2d5Lm9iamVjdHM7XG4gICAgXHRzZXREYXRhKHtcbiAgICAgICAgc3RhdGVzOiBmZWF0dXJlKHRvcG9sb2d5LCBzdGF0ZXMpLFxuICAgICAgICBpbnRlcmlvcnM6IG1lc2godG9wb2xvZ3ksIHN0YXRlcywgKGEsIGIpID0+IGEgIT0gYilcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9LCBbXSk7XG4gICAgXG5cbiAgcmV0dXJuIGRhdGE7XG59O1xuIiwiaW1wb3J0IHsgdXNlU3RhdGUsIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNzdiB9IGZyb20gJ2QzJztcblxuY29uc3QgY3N2VXJsID0gJ2h0dHBzOi8vZ2lzdC5naXRodWJ1c2VyY29udGVudC5jb20vaXRzeWFib2ljaGFzZS9mZTkyZDNhYzc2Yjk4MTI2ZmIzZmM3NjZlNTJmNjQxNC9yYXcvYjdkY2M4MWY4YjY5MGMyNGNkMzJlNTRiZjMxZjcxOGM0ZjBiZDNjYi93aG9sZV91c2Ffb3pvbmVfZXhzYW1wbGVfY2xlYW5lZC5jc3YnO1xuXG5jb25zdCByb3cgPSBkID0+IHtcbiAgZC5sYXRpdHVkZSA9ICtkLmxhdGl0dWRlO1xuICBkLmxvbmdpdHVkZSA9ICtkLmxvbmdpdHVkZTtcbiAgZC5BUUkgPSArZC5BUUk7XG4gIGQuZGF0ZUNvbGxlY3RlZCA9IG5ldyBEYXRlKGQuZGF0ZUNvbGxlY3RlZCk7XG4gIHJldHVybiBkO1xufTtcblxuZXhwb3J0IGNvbnN0IHVzZURhdGEgPSAoKSA9PiB7XG4gIGNvbnN0IFtkYXRhLCBzZXREYXRhXSA9IHVzZVN0YXRlKG51bGwpO1xuICBcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjc3YoY3N2VXJsKS50aGVuKHNldERhdGEpXG4gIH0sIFtdKTtcbiAgICBcbiAgcmV0dXJuIGRhdGE7XG59OyIsImltcG9ydCB7IGdlb0FsYmVyc1VzYSwgZ2VvUGF0aCB9IGZyb20gJ2QzJztcblxuY29uc3QgcHJvamVjdGlvbiA9IGdlb0FsYmVyc1VzYSgpXG5jb25zdCBwYXRoID0gZ2VvUGF0aChwcm9qZWN0aW9uKTtcblxuZXhwb3J0IGNvbnN0IE1hcmtzID0gKHsgXG4gIFVTQXRsYXM6IHsgc3RhdGVzLCBpbnRlcmlvcnMgfSwgXG4gIGRhdGEsXG4gIHNpemVTY2FsZSxcbiAgc2l6ZVZhbHVlXG59KSA9PiAoXG4gIDxnIGNsYXNzTmFtZT1cIm1hcmtzXCI+XG4gICAge3N0YXRlcy5mZWF0dXJlcy5tYXAoZmVhdHVyZSA9PiAoXG4gICAgICA8cGF0aCBjbGFzc05hbWU9XCJzdGF0ZXNcIiBkPXtwYXRoKGZlYXR1cmUpfSAvPlxuICAgICkpfVxuICAgIDxwYXRoIGNsYXNzTmFtZT1cImludGVyaW9yc1wiIGQ9e3BhdGgoaW50ZXJpb3JzKX0gLz5cbiAgICB7ZGF0YS5tYXAoZCA9PiB7XG4gICAgICBjb25zdCBbeCwgeV0gPSBwcm9qZWN0aW9uKFtkLmxvbmdpdHVkZSwgZC5sYXRpdHVkZV0pO1xuICAgICAgcmV0dXJuIDxjaXJjbGUgXG4gICAgICAgICAgICAgICBjeD17eH1cbiAgICAgICAgICAgICAgIGN5PXt5fVxuICAgICAgICAgICAgICAgcj17c2l6ZVNjYWxlKHNpemVWYWx1ZShkKSl9XG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICBcdDx0aXRsZT4gcGxhY2UgaG9sZGVyIGZvciAxMCBncmVlbiBzY29yZSA8L3RpdGxlPlxuICAgICAgICBcdCBcdCA8L2NpcmNsZT5cbiAgICB9KX1cbiAgPC9nPlxuKTtcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBzY2FsZVNxcnQsIG1heCB9IGZyb20gJ2QzJztcbmltcG9ydCB7IE1hcmtzIH0gZnJvbSAnLi9NYXJrcyc7XG5cbmV4cG9ydCBjb25zdCBCdWJibGVNYXAgPSAoeyBkYXRhLCBVU0F0bGFzIH0pID0+IHtcbiAgY29uc3Qgc2l6ZVZhbHVlID0gZCA9PiBkLkFRSTtcblx0Y29uc3QgbWF4UmFkaXVzID0gNTtcbiAgICAgICAgXG4gIGNvbnN0IHNpemVTY2FsZSA9IHNjYWxlU3FydCgpXG5cdFx0LmRvbWFpbihbMCwgbWF4KGRhdGEsIHNpemVWYWx1ZSldKVxuICBcdC5yYW5nZShbMCwgbWF4UmFkaXVzXSlcbiAgXG4gIHJldHVybihcblx0XHQ8TWFya3NcbiAgICAgIFVTQXRsYXM9e1VTQXRsYXN9XG4gICAgICBkYXRhPXtkYXRhfVxuICAgICAgc2l6ZVNjYWxlPXtzaXplU2NhbGV9XG4gICAgXHRzaXplVmFsdWU9e3NpemVWYWx1ZX1cbiAgXHQvPlxuICApO1xufTsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgeyB1c2VVU0F0bGFzIH0gZnJvbSAnLi91c2VVU0F0bGFzJztcbmltcG9ydCB7IHVzZURhdGEgfSBmcm9tICcuL3VzZURhdGEnO1xuaW1wb3J0IHsgQnViYmxlTWFwIH0gZnJvbSAnLi9CdWJibGVNYXAnO1xuaW1wb3J0IHsgRGF0ZUhpc3RvZ3JhbSB9IGZyb20gJy4vRGF0ZUhpc3RvZ3JhbSc7XG5cbmNvbnN0IHdpZHRoID0gOTYwO1xuY29uc3QgaGVpZ2h0ID0gNTAwO1xuXG5jb25zdCBBcHAgPSAoKSA9PiB7XG4gIGNvbnN0IFVTQXRsYXMgPSB1c2VVU0F0bGFzKCk7XG4gIGNvbnN0IGRhdGEgPSB1c2VEYXRhKCk7XG5cbiAgaWYgKCFVU0F0bGFzIHx8ICFkYXRhKSB7IFxuICAgIHJldHVybiA8cHJlPkxvYWRpbmcuLi48L3ByZT47XG4gIH1cblxucmV0dXJuIChcbiAgPHN2ZyB3aWR0aD17d2lkdGh9IGhlaWdodD17aGVpZ2h0fT5cbiAgICA8QnViYmxlTWFwIGRhdGE9e2RhdGF9IFVTQXRsYXM9e1VTQXRsYXN9IC8+XG4gIDwvc3ZnPlxuXHQpO1xufTtcblxuY29uc3Qgcm9vdEVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncm9vdCcpO1xuUmVhY3RET00ucmVuZGVyKDxBcHAgLz4sIHJvb3RFbGVtZW50KTsiXSwibmFtZXMiOlsidXNlU3RhdGUiLCJ1c2VFZmZlY3QiLCJqc29uIiwiZmVhdHVyZSIsIm1lc2giLCJjc3YiLCJnZW9BbGJlcnNVc2EiLCJnZW9QYXRoIiwic2NhbGVTcXJ0IiwibWF4IiwiUmVhY3QiXSwibWFwcGluZ3MiOiI7Ozs7OztFQUlBLE1BQU0sT0FBTyxHQUFHLGtEQUFrRCxDQUFDO0FBQ25FO0VBQ08sTUFBTSxVQUFVLEdBQUcsTUFBTTtFQUNoQyxFQUFFLE1BQU0sQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLEdBQUdBLGdCQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7RUFDekMsRUFBRUMsaUJBQVMsQ0FBQyxNQUFNO0VBQ2xCLElBQUlDLE9BQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxJQUFJO0VBQ25DLE1BQU0sTUFBTSxFQUFFLE1BQU0sRUFBRSxHQUFHLFFBQVEsQ0FBQyxPQUFPLENBQUM7RUFDMUMsS0FBSyxPQUFPLENBQUM7RUFDYixRQUFRLE1BQU0sRUFBRUMsZ0JB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